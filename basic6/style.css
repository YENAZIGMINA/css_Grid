@charset "UTF-8";

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* ❗ grid는 flex보다 나중에 나왔음
   ❗ flex는 한방향 배치 구현
   ❗ grid는 두방향 배치 구현
   두 개를 다 안다면 알맞은 곳에 사용할 수 있다
   전체구성은 grid로 하고, 부분구성은 flex로 하는 경우가 많다 */

.container {
    border: 2px solid #684591;
    background-color: rgb(204, 145, 206);
    padding: 10px;
}
.item {
    border: 2px solid #684591;
    background-color: rgb(255, 250, 184);
    padding: 10px;
}


/* grid-column, grid-row 

*grid에는 라인이 있는데 그 라인에는 번호가 있음
각 셀별로 영역을 지정할 수 있음. item(자식)에 지정해야 한다. */

body {font-size: 20px;}
.container {
    font-size: 12px;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-auto-rows: minmax(100px, auto);
    gap: 1rem; /* r은 root */
}
.item {
    font-size: 1rem;
}

.item:nth-child(1) {
    grid-column-start: 1;
    grid-column-end: 3;
    /* 개발자모드에서 grid누르면 숫자 나오는데 start, end에 값 넣어서 합칠 수 있음
       필요없는 영역은 인덱스에서 지우면 됨 */
    grid-column: 1/3; /* 압축 : 1~3까지 의미 */
    
    grid-row-start: 1;
    grid-row-end: 4;
    grid-row: 1/4; /* 압축 */
}

.item:nth-child(3) {
    grid-row: 2;
    grid-column: 3;
    z-index: 10; /* grid에서는 position없이 z-index 가능함 */
}

.item:nth-child(4) {
    grid-row: 3; /* grid-row: 3/4; */
    /* 기본이 한 칸이므로 end는 생략할 수 있다 */
    grid-row: 3/5; 
    grid-row: 2/span 2; /* --> 3번부터 2칸 (바로 윗태그랑 같은 결과 나타남)  */
    grid-column: 3;
}